-------------------------------
doctest for 7-base_geometry.py
-------------------------------
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Testing of instanciation
::
>>> bg = BaseGeometry()


Testing of area():
::
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented


Testing of integer_validator with normal case
::
>>> bg.integer_validator("my_int", 12)


Testing of integer_validator with normal case
::
>>> bg.integer_validator("width", 89)


Testing of integer_validator with integer
::
>>> bg.integer_validator("name", "aicha")
Traceback (most recent call last):
TypeError: name must be an integer

Testing of integer_validator with integer equal to 0
::
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

Testing of integer_validator with integer less than 0
::
>>> bg.integer_validator("age", -1)
Traceback (most recent call last):
ValueError: age must be greater than 0

Testing of integer_validator with one argument
::
>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

Testing of integer_validator with no argument
::
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Testing of integer_validator with None
::
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer

Testing of integer_validator with list
::
>>> bg.integer_validator("age", [1])
Traceback (most recent call last):
TypeError: age must be an integer

Testing of integer_validator with boolean
::
>>> bg.integer_validator("age", True)
Traceback (most recent call last):
TypeError: age must be an integer

Testing of integer_validator with dictionary
::
>>> bg.integer_validator("age", ("age", 14))
Traceback (most recent call last):
TypeError: age must be an integer

Testing of integer_validator with tuple
::
>>> bg.integer_validator("age", (3, ))
Traceback (most recent call last):
TypeError: age must be an integer
